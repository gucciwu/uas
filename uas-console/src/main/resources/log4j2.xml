<?xml version="1.0" encoding="UTF-8"?>

<Configuration status="off" monitorInterval="1800">
	<!-- 定义公用的属性值，这些值可以在后面引用 -->
	<properties>
		<property name="LOG_HOME">c:/logs/</property>
		<property name="ERROR_LOG_FILE_NAME">error</property>
	</properties>
    <!-- 定义多个日志的输出目的地 -->
	<Appenders>
	    <!--输出至控制台的配置--> 
		<Console name="Console" target="SYSTEM_OUT">
		    <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) 了8个级别的log（除去OFF和ALL，可以说分为6个级别），优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			<!-- <PatternLayout pattern="%d %-5p (%F:%L) - %m%n" /> -->
			<PatternLayout pattern="%d [%t] %-5p %l - %m%n" />
		</Console>
		 <!--输出至文件的配置 设置日志格式并配置日志压缩格式xx.log.年份.gz)--> 
		<RollingRandomAccessFile name="ErrorLog"
			fileName="${LOG_HOME}/${ERROR_LOG_FILE_NAME}.log" 
			filePattern="${LOG_HOME}/${ERROR_LOG_FILE_NAME}.%d{yyyy-MM-dd}.log.gz">
			 <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			<!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
			<!-- <PatternLayout pattern="%d %-5p (%F:%L) - %m%n" /> -->
			<PatternLayout pattern="%d [%t] %-5p %l - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>
		
		
		<JDBC name="DatabaseLog" tableName="pf_sm_log">  
     		<ConnectionFactory class="com.mszq.platform.util.Log4j2Util" method="getDatabaseConnection" />  
     		<Column name="account" pattern="%X{account}"/> 
     		<Column name="name" pattern="%X{name}"/> 
     		<Column name="date" isEventTimestamp="true"/>
     		 <Column name="message" pattern="%message"/>  
     		<Column name="level" pattern="%level" />  
         </JDBC>  
		
	</Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
	<Loggers>
	    <!-- 配置日志的根节点 ,其他的logger都继承这个root logger-->
		<root level="info" includeLocation="true">
			<appender-ref ref="Console" />
			<appender-ref ref="ErrorLog" /> 
		</root>	
		
		<logger name="com.mszq" level="info">
		  <appender-ref ref="DatabaseLog"/>  
		</logger>
		 
	
		
		<!-- 3rdparty Loggers
		   logger的name是通过形如：Logger logger=LoggerFactory.getLogger(LoginController.class);的方式获取logger的类的全路径
		   这种方式可以为不同的类或者包设置不同的日志输出级别及目的地 
		
        <logger name="org.springframework.core" level="info"/>
        <logger name="org.springframework.beans" level="info"/>
        <logger name="org.springframework.context" level="info"/>
        <logger name="org.springframework.web" level="info"/>
        -->
        <logger name="org.apache.shiro" level="info"/>
        <!-- druid配置 -->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <logger name="druid.sql.ResultSet" level="debug" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        
		 <logger name="org.springframework" level="info">
        	<appender-ref ref="Console"/>
        </logger>
	</Loggers>
</Configuration>  